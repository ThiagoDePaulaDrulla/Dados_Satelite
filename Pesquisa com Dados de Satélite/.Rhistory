y
yed
yes
clear
install.packages("mlbench")
library("caret")
library("Satellite.rda")
library("Satellite")
install.packages("mlbench ")
install.packages("mlbench")
install.packages("mlbench")
library("mlbench")
library("mlbench")
data(Satellite)
library("mlbench")
data(Satellite)
dataset <- Satellite
dataset
library("mlbench")
data(Satellite)
map <- Satellite
map_index <- createDataPartition(map$classes, p=0.80, list=FALSE)
library("mlbench")
data(Satellite)
map <- Satellite
map_index <- createDataPartition(map$classes, p=0.80, list=FALSE)
install.packages("randomForest")
library("mlbench")
data(Satellite)
map <- Satellite
map_index <- createDataPartition(map$classes, p=0.80, list=FALSE)
install.packages("e1071")
library("mlbench")
data(Satellite)
map <- Satellite
map_index <- createDataPartition(map$classes, p=0.80, list=FALSE)
install.packages("kernlab")
library("mlbench")
data(Satellite)
map <- Satellite
map_index <- createDataPartition(map$classes, p=0.80, list=FALSE)
install.packages("caret")
library("mlbench")
data(Satellite)
map <- Satellite
map_index <- createDataPartition(map$classes, p=0.80, list=FALSE)
install.packages("mlbench")
install.packages("randomForest")
install.packages("e1071")
install.packages("kernlab")
install.packages("caret")
library("caret")
install.packages("mlbench")
library("mlbench")
data(Satellite)
map <- Satellite
map_index <- createDataPartition(map$classes, p=0.80, list=FALSE)
library("caret")
library("mlbench")
data(Satellite)
map <- Satellite
map_index <- createDataPartition(map$classes, p=0.80, list=FALSE)
data(Satellite)
map <- Satellite
map_index <- createDataPartition(map$classes, p=0.80, list=FALSE)
training <- map[map_index,]
test <- map[-map_index,]
set.seed(7)
rf <- train(classes~., data=training, method="rf")
View(training)
data(Satellite)
map <- Satellite
map_index <- createDataPartition(map$classes, p=0.80, list=FALSE)
training <- map[map_index,]
test <- map[-map_index,]
set.seed(7)
rf <- train(classes~., data=training, method="rf")
predicoes.rf <- predict(rf, test)
confusionMatrix(predicoes.rf, test$classes)
View(dataset)
View(map_index)
View(training)
gc()
rf <- train(classes~., data=training, method="svmRadial")
predicoes.svm <- predict(svm, test)
svm <- train(classes~., data=training, method="svmRadial")
predicoes.svm <- predict(svm, test)
confusionMatrix(predicoes.svm, test$classes)
predicoes.svm <- predict(svm, test)
confusionMatrix(predicoes.svm, test$classes)
rna <- train(classes~., data=training, method="nnet", trace=FALSE)
predicoes.rna <- predict(rna, test)
confusionMatrix(predicoes.rna, test$classes)
print(rf)
print(rf)
#Portanto, o método que teve mais eficiencia foi o Random Forest
print(svm)
#Portanto, o método que teve mais eficiencia foi o Random Forest
print(rna)
#Portanto, o método que teve mais eficiencia foi o Random Forest
print(rf)
#Portanto, o método que teve mais eficiencia foi o Random Forest
print(svm)
data(Satellite)
map <- Satellite
map_index <- createDataPartition(map$classes, p=0.80, list=FALSE)
training <- map[map_index,]
test <- map[-map_index,]
set.seed(7)
rf <- train(classes~., data=training, method="rf")
predicoes.rf <- predict(rf, test)
confusionMatrix(predicoes.rf, test$classes)
final_model <- randomForest(type="C-svc", classes~., data=map, kernel="rbfdot",
C=1.0, kpar=list(sigma=0.01173596))
final_model <- ksvm(type="C-svc", classes~., data=map, kernel="rbfdot",
C=1.0, kpar=list(sigma=0.01173596))
print(rf)
final_model <- randomForest(type="C-svc", classes~., data=map, kernel="rbfdot",
C=1.0, kpar=list(sigma=0.01173596))
final_model <- randomForest(type="C-svc", classes~., data=map, kernel="rbfdot",
C=1.0, kpar=list(sigma=0.01173596))
final_model <- randomForest(type="C-svc", classes~., data=map, kernel="rbfdot",C=1.0, kpar=list(sigma=0.01173596))
install.packages("randomForest")
install.packages("randomForest")
print(rf)
final_model <- randomForest(type="C-svc", classes~., data=map, kernel="rbfdot",C=1.0, kpar=list(sigma=0.01173596))
final_model <- ksvm(type="C-svc", classes~., data=map, kernel="rbfdot",C=1.0, kpar=list(sigma=0.01173596))
final_model <- ksvm(type="C-svc", Class~., data=dados, kernel="rbfdot",C=1.0, kpar=list(sigma=0.01173596))
library("randomForest")
final_model <- randomForest(type="C-svc", classes~., data=map, kernel="rbfdot",C=1.0, kpar=list(sigma=0.01173596))
final_predict.rf <- predict(final_model, map)
confusionMatrix(final_predict.rf, map$classes)
final_model <- randomForest(type="C-svc", classes~., data=map, kernel="rbfdot",C=1.0, kpar=list(sigma=0.01173596))
final_predict.rf <- predict(final_model, map)
confusionMatrix(final_predict.rf, map$classes)
install.packages("mlbench")
install.packages("randomForest")
install.packages("e1071")
final_model <- randomForest(type="C-svc", classes~., data=map, kernel="rbfdot",C=1.0, kpar=list(sigma=0.01173596))
ibrary("caret")
library("caret")
library("mlbench")
library("randomForest")
final_model <- randomForest(type="C-svc", classes~., data=map, kernel="rbfdot",C=1.0, kpar=list(sigma=0.01173596))
final_predict.rf <- predict(final_model, map)
confusionMatrix(final_predict.rf, map$classes)
saveRDS(final_model, "map_rf.rds")
final_model <- randomForest(type="C-svc", classes~., data=map, kernel="rbfdot",C=1.0, kpar=list(sigma=0.01173596))
final_predict.rf <- predict(final_model, map)
confusionMatrix(final_predict.rf, map$classes)
saveRDS(final_model, "map_rf.rds")
final_model <- ksvm(type="C-svc", classes~., data=map, kernel="rbfdot",C=1.0, kpar=list(sigma=0.01173596))
library("caret")
library("mlbench")
library("randomForest")
final_model <- ksvm(type="C-svc", classes~., data=map, kernel="rbfdot",C=1.0, kpar=list(sigma=0.01173596))
final_model <- randomForest(type="C-svc", classes~., data=map, kernel="rbfdot",C=1.0, kpar=list(sigma=0.01173596))
final_predict.rf <- predict(final_model, map)
confusionMatrix(final_predict.rf, map$classes)
saveRDS(final_model, "map_rf.rds")
map_index
